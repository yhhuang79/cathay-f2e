{"version":3,"sources":["reducers/rootReducer.js","reducers/orderReducer.js","components/ListBlock.js","App.js","actions/orderAction.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","orderList","state","action","type","orders","payload","ListBlock","title","list","style","backgroundColor","textAlign","marginLeft","color","List","map","order","i","console","log","orderTitle","status","code","marginRight","date","renderAvatar","Avatar","src","logo","opacity","ListItem","marginBottom","key","alignItems","ListItemAvatar","ListItemText","primary","secondary","Fragment","Typography","component","variant","name","ListItemSecondaryAction","IconButton","edge","aria-label","App","this","props","fetchOrders","className","filter","Component","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.193626d0.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport orderReducer from './orderReducer';\n\nexport default combineReducers({\n orderList: orderReducer\n});","export default (state = {}, action) => {\n  switch (action.type) {\n   case 'FETCH_ORDERS':\n    return {\n     orders: action.payload\n    }\n   default:\n    return state\n  }\n }","import React from 'react';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nconst ListBlock = ({title, list}) =>\n  <div style={{ backgroundColor: 'rgb(240, 240, 240)' }}>\n    <div style={{ textAlign: 'left', marginLeft: '1em' }}>\n      <span style={{ color: 'MediumSeaGreen' }}>&#9613;</span>\n      <span>{title}</span>\n    </div>\n    <div>\n      <List>\n        {\n          list.map((order, i) => {\n            console.log(order);\n            const orderTitle = (order.status.code === 1 || order.status.code === 2) ?\n              <div>\n                <span style={{ color: 'rgb(60, 179, 113)', marginRight: '4em' }}>{order.status.type}</span>\n                <span>預計出貨: {order.date}</span>\n              </div> :\n              <div><span>{order.status.type}</span></div>;\n            const renderAvatar = (order.status.code === 1 || order.status.code === 2) ?\n              <Avatar src={order.logo} /> :\n              <Avatar style={{ opacity: '0.2' }} src={order.logo} />;\n\n            return (\n              <ListItem style={{ backgroundColor: '#FFFFFF', marginBottom: '2px' }} key={i} alignItems=\"flex-start\">\n                <ListItemAvatar>\n                  {renderAvatar}\n                </ListItemAvatar>\n                <ListItemText\n                  primary={orderTitle}\n                  secondary={\n                    <React.Fragment>\n                      <Typography\n                        component=\"span\"\n                        variant=\"body2\"\n                        color=\"textPrimary\"\n                      >\n                        {order.name}\n                      </Typography>\n                    </React.Fragment>\n                  }\n                />\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" aria-label=\"arrow-forward\">\n                    <ArrowForwardIosIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>);\n          })\n        }\n      </List>\n    </div>\n  </div>;\n\nexport default ListBlock;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchOrders } from './actions/orderAction';\nimport ListBlock from './components/ListBlock'; \nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchOrders();\n  }\n\n  render() {\n    const { orderList } = this.props;\n    const orders = orderList.orders || [];\n    return (\n      <div className=\"App\">\n        <ListBlock title=\"處理中\" list={orders.filter(order => (order.status.code === 1 || order.status.code === 2))} />\n        <ListBlock title=\"已完成\" list={orders.filter(order => (order.status.code === 3 || order.status.code === 4))} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchOrders: () => dispatch(fetchOrders())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const fetchOrders = () => dispatch => {\n  const apiResponse = {\n    orders: [\n      {\n          name: 'Livi優活 抽取式衛生紙(100抽x10包x10串/箱)',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 3,\n            type: '已取消'\n          },\n          date: '107/6/12'\n      },\n      {\n          name: 'BALMUDA The Toaster 百慕達烤麵包機-黑色',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 2,\n            type: '已成立'\n          },\n          date: '108/7/21'\n      },\n      {\n          name: '贈-短慧萬用鍋HD2133+三合一濾網「LG樂金」韓國原裝...',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 1,\n            type: '處理中'\n          },\n          date: '108/6/2'\n        },\n        {\n          name: 'Apple AirPds 2',\n          logo: 'https://static.oopocket.com/store/iconTreemall@3x.png',\n          status: {\n            code: 4,\n            type: '已送達'\n          },\n          date: '108/3/02'\n      }\n    ]\n  };\n  dispatch({\n   type: 'FETCH_ORDERS',\n   payload: apiResponse.orders\n  })\n }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore(initialState={}) {\n return createStore(\n   rootReducer,\n   initialState,\n   applyMiddleware(thunk)\n );\n}\n"],"sourceRoot":""}